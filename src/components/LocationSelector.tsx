import { useState } from "react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { MapPin } from "lucide-react";

interface LocationSelectorProps {
  selectedLocation: string;
  onLocationChange: (location: string) => void;
  className?: string;
  placesByLocation?: any;
  categoryFilter?: (place: any) => boolean;
}

const tokyoLocations = [
  { value: "all", label: "Ï†ÑÏ≤¥ ÏßÄÏó≠", emoji: "üóæ" },
  { value: "shinjuku", label: "Ïã†Ï£ºÏø†", emoji: "üè¢" },
  { value: "shibuya", label: "ÏãúÎ∂ÄÏïº", emoji: "üö¶" },
  { value: "ginza", label: "Í∏¥Ïûê", emoji: "üíé" },
  { value: "asakusa", label: "ÏïÑÏÇ¨Ïø†ÏÇ¨", emoji: "üèõÔ∏è" },
  { value: "harajuku", label: "ÌïòÎùºÏ£ºÏø†", emoji: "üëó" },
  { value: "roppongi", label: "Î°ØÌè∞Í∏∞", emoji: "üç∏" },
  { value: "ueno", label: "Ïö∞ÏóêÎÖ∏", emoji: "üå∏" },
  { value: "other", label: "Í∏∞ÌÉÄ ÏßÄÏó≠", emoji: "üèôÔ∏è" },
  { value: "cafe", label: "Ïπ¥Ìéò/Í∏∞ÌÉÄ", emoji: "‚òï" },
  { value: "akihabara", label: "ÏïÑÌÇ§ÌïòÎ∞îÎùº", emoji: "üéÆ" },
  { value: "tsukiji", label: "Ïì∞ÌÇ§ÏßÄ", emoji: "üêü" },
  { value: "tokyo-station", label: "ÎèÑÏøÑÏó≠", emoji: "üöâ" },
  { value: "skytree", label: "Ïä§Ïπ¥Ïù¥Ìä∏Î¶¨", emoji: "üóº" }
];

// ÏßÄÏó≠Î≥Ñ Ïû•ÏÜå Í∞úÏàòÎ•º ÌôïÏù∏ÌïòÎäî Ìï®Ïàò
const getLocationCount = (location: string, placesByLocation: any, categoryFilter?: (place: any) => boolean) => {
  if (location === "all") {
    const allPlaces = placesByLocation[location] || [];
    return categoryFilter ? allPlaces.filter(categoryFilter).length : allPlaces.length;
  }
  const locationPlaces = placesByLocation[location] || [];
  return categoryFilter ? locationPlaces.filter(categoryFilter).length : locationPlaces.length;
};

export function LocationSelector({ selectedLocation, onLocationChange, className = "", placesByLocation, categoryFilter }: LocationSelectorProps) {
  const selectedLocationData = tokyoLocations.find(loc => loc.value === selectedLocation);

  // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî ÏßÄÏó≠Îßå ÌïÑÌÑ∞ÎßÅ
  const availableLocations = tokyoLocations.filter(location => {
    if (location.value === "all") return true; // Ï†ÑÏ≤¥Îäî Ìï≠ÏÉÅ ÌëúÏãú
    if (!placesByLocation || !categoryFilter) return true; // ÌïÑÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Î™®Îëê ÌëúÏãú
    
    const count = getLocationCount(location.value, placesByLocation, categoryFilter);
    return count > 0;
  });

  return (
    <div className={`space-y-2 ${className}`}>
      <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground">
        <MapPin className="w-4 h-4" />
        <span>ÏßÄÏó≠ ÏÑ†ÌÉù</span>
      </div>
      
      <Select value={selectedLocation} onValueChange={onLocationChange}>
        <SelectTrigger className="w-full">
          <SelectValue>
            <div className="flex items-center gap-2">
              <span>{selectedLocationData?.emoji}</span>
              <span>{selectedLocationData?.label}</span>
            </div>
          </SelectValue>
        </SelectTrigger>
        <SelectContent>
          {availableLocations.map((location) => {
            const count = placesByLocation && categoryFilter 
              ? getLocationCount(location.value, placesByLocation, categoryFilter)
              : 0;
            
            return (
              <SelectItem key={location.value} value={location.value}>
                <div className="flex items-center gap-2">
                  <span>{location.emoji}</span>
                  <span>{location.label}</span>
                  {count > 0 && (
                    <span className="text-xs text-muted-foreground">({count})</span>
                  )}
                </div>
              </SelectItem>
            );
          })}
        </SelectContent>
      </Select>
    </div>
  );
}
